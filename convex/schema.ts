import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    email: v.string(),
    role: v.string(),
    name: v.string(),
    affiliateId: v.optional(v.string()),
    staffId: v.optional(v.string()),
    salesId: v.optional(v.string()),
  }).index("by_email", ["email"]),

  userProfiles: defineTable({
    userId: v.id("users"),
    name: v.string(),
    address: v.string(),
    phone: v.string(),
    email: v.string(),
    zipCode: v.string(),
    businessName: v.optional(v.string()),
    businessAddress: v.optional(v.string()),
    businessPhoneNumber: v.optional(v.string()),
    businessEmail: v.optional(v.string()),
    businessWebsite: v.optional(v.string()),
    businessSocials: v.optional(v.any()),
    adminNotes: v.optional(v.string()),
    customerNotes: v.optional(v.string()),
  }).index("by_user", ["userId"]),

  reviews: defineTable({
    reviewerName: v.string(),
    reviewContent: v.string(),
    rating: v.number(),
    reviewDate: v.string(),
    reviewSource: v.string(),
    reviewRelationship: v.optional(v.string()),
    isCustomer: v.boolean(),
    isFormerEmployee: v.optional(v.boolean()),
    knowsReviewerIdentity: v.boolean(),
    reviewerDetails: v.optional(v.any()),
    associatedMediaIds: v.optional(v.array(v.string())),
  }),

  affiliates: defineTable({
    name: v.string(),
    email: v.string(),
    signupDate: v.string(),
    status: v.string(),
    payoutDetails: v.string(),
    currentBalance: v.number(),
    totalClicks: v.number(),
    totalSales: v.number(),
    affiliateLink: v.string(),
    qrCodeLink: v.string(),
    userId: v.optional(v.id("users")),
    isHighValue: v.optional(v.boolean()),
  }).index("by_user", ["userId"]),

  staffMembers: defineTable({
    userId: v.optional(v.id("users")),
    name: v.string(),
    email: v.string(),
    internalRole: v.string(),
    team: v.optional(v.string()),
    isOwner: v.optional(v.boolean()),
  }).index("by_user", ["userId"]),

  salesMembers: defineTable({
    userId: v.optional(v.id("users")),
    name: v.string(),
    email: v.string(),
    signupDate: v.string(),
    status: v.string(),
    currentBalance: v.number(),
    totalEarnings: v.number(),
    totalTasksCompleted: v.number(),
    averageRating: v.number(),
    payoutDetails: v.string(),
    specializations: v.optional(v.array(v.string())),
  }).index("by_user", ["userId"]),

  salesTasks: defineTable({
    title: v.string(),
    description: v.string(),
    category: v.string(),
    reward: v.number(),
    requirements: v.array(v.string()),
    estimatedTime: v.string(),
    difficulty: v.string(),
    status: v.string(),
    postedDate: v.string(),
    deadline: v.optional(v.string()),
    maxClaims: v.number(),
    currentClaims: v.number(),
    createdByStaffId: v.string(),
    approvedByStaffId: v.optional(v.string()),
    tags: v.optional(v.array(v.string())),
  }),

  salesTaskClaims: defineTable({
    taskId: v.id("salesTasks"),
    salesId: v.string(),
    claimedDate: v.string(),
    submittedDate: v.optional(v.string()),
    submissionNotes: v.optional(v.string()),
    submissionFiles: v.optional(v.array(v.string())),
    reviewedDate: v.optional(v.string()),
    reviewerStaffId: v.optional(v.string()),
    reviewNotes: v.optional(v.string()),
    status: v.string(),
    paidDate: v.optional(v.string()),
    paidAmount: v.optional(v.number()),
  }).index("by_task", ["taskId"]).index("by_sales", ["salesId"]),

  salesNotifications: defineTable({
    recipientSalesId: v.string(),
    message: v.string(),
    timestamp: v.string(),
    isRead: v.boolean(),
    severity: v.string(),
    relatedTaskId: v.optional(v.string()),
    actionRequired: v.optional(v.boolean()),
  }).index("by_sales", ["recipientSalesId"]),
}); 