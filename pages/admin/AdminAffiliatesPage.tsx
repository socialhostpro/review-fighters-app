
import React, { useEffect, useState, useCallback } from 'react';
import { affiliateService } from '../../services/affiliateService';
import { Affiliate } from '../../types';
import LoadingSpinner from '../../components/LoadingSpinner';
import Button from '../../components/Button';
import Modal from '../../components/Modal'; // Assuming you have a Modal component
import Input from '../../components/Input';   // Assuming you have an Input component
import { AlertTriangle, UserPlus, Edit3, CheckCircle, XCircle, Eye } from 'lucide-react';

const AdminAffiliatesPage: React.FC = () => {
  const [affiliates, setAffiliates] = useState<Affiliate[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAffiliate, setEditingAffiliate] = useState<Partial<Affiliate> | null>(null);
  const [isSaving, setIsSaving] = useState(false);

  const fetchAffiliates = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const data = await affiliateService.getAllAffiliates();
      setAffiliates(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load affiliates.");
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchAffiliates();
  }, [fetchAffiliates]);

  const handleOpenModal = (affiliate?: Affiliate) => {
    setEditingAffiliate(affiliate ? { ...affiliate } : { name: '', email: '', status: 'Pending', payoutDetails: '' });
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingAffiliate(null);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setEditingAffiliate(prev => prev ? { ...prev, [name]: value } : null);
  };

  const handleSaveChanges = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingAffiliate) return;
    setIsSaving(true);
    try {
      if (editingAffiliate.affiliateID) {
        // This would be an update operation, for now we only have status update
        await affiliateService.updateAffiliateStatus(editingAffiliate.affiliateID, editingAffiliate.status || 'Pending');
      } else {
        // Create new affiliate
        // Destructure to separate known auto-generated/non-input fields from the data to be passed.
        // signupDate is auto-generated by the service.
        // userId can be passed if available in editingAffiliate (e.g., if linking to an existing user, though form doesn't explicitly set it for new).
        const { affiliateID, affiliateLink, qrCodeLink, totalClicks, totalSales, currentBalance, signupDate, ...newAffData } = editingAffiliate;
        
        if (!newAffData.name || !newAffData.email) {
            throw new Error("Name and Email are required for new affiliates.");
        }
        // The service expects Omit<Affiliate, 'affiliateID' | 'affiliateLink' | 'qrCodeLink' | 'totalClicks' | 'totalSales' | 'currentBalance' | 'signupDate'>
        // newAffData will contain name, email, status, payoutDetails, and userId (if it was part of editingAffiliate)
        await affiliateService.createAffiliate(newAffData as Omit<Affiliate, 'affiliateID' | 'affiliateLink' | 'qrCodeLink' | 'totalClicks' | 'totalSales' | 'currentBalance' | 'signupDate'>);
      }
      await fetchAffiliates();
      handleCloseModal();
    } catch (err) {
      alert(`Error saving affiliate: ${err instanceof Error ? err.message : String(err)}`);
    } finally {
      setIsSaving(false);
    }
  };
  
  const handleStatusChange = async (affiliateId: string, newStatus: Affiliate['status']) => {
    if (!window.confirm(`Are you sure you want to change status to ${newStatus}?`)) return;
    try {
        await affiliateService.updateAffiliateStatus(affiliateId, newStatus);
        fetchAffiliates(); // Refresh list
    } catch(err) {
        alert(`Error updating status: ${err instanceof Error ? err.message : String(err)}`);
    }
  }

  if (isLoading && affiliates.length === 0) {
    return <div className="flex justify-center items-center h-64"><LoadingSpinner size="lg" /></div>;
  }

  if (error) {
    return (
      <div className="container mx-auto p-4 text-center">
        <AlertTriangle size={48} className="text-red-500 mx-auto mb-4" />
        <h2 className="text-xl font-semibold text-red-700">Error Loading Affiliates</h2>
        <p className="text-textSecondary">{error}</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-textPrimary">Manage Affiliates</h1>
        <Button onClick={() => handleOpenModal()} leftIcon={<UserPlus size={18}/>}>
            Add New Affiliate
        </Button>
      </div>

      {affiliates.length === 0 && !isLoading ? (
        <p className="text-center text-textSecondary py-10">No affiliates found.</p>
      ) : (
        <div className="bg-surface shadow-md rounded-lg overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Name</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Email</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Status</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Balance</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Joined</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-textSecondary uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {affiliates.map((affiliate) => (
                <tr key={affiliate.affiliateID} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-textPrimary">{affiliate.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-textSecondary">{affiliate.email}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      affiliate.status === 'Active' ? 'bg-green-100 text-green-800' :
                      affiliate.status === 'Inactive' ? 'bg-red-100 text-red-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      {affiliate.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-textSecondary">${affiliate.currentBalance.toFixed(2)}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-textSecondary">{new Date(affiliate.signupDate).toLocaleDateString()}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    {/* <Button variant="ghost" size="sm" onClick={() => handleOpenModal(affiliate)} title="Edit Affiliate Details">
                        <Edit3 size={16} />
                    </Button> */}
                    {affiliate.status !== 'Active' && (
                        <Button variant="ghost" size="sm" onClick={() => handleStatusChange(affiliate.affiliateID, 'Active')} className="text-green-600 hover:text-green-800" title="Activate">
                            <CheckCircle size={16} />
                        </Button>
                    )}
                    {affiliate.status !== 'Inactive' && (
                         <Button variant="ghost" size="sm" onClick={() => handleStatusChange(affiliate.affiliateID, 'Inactive')} className="text-red-600 hover:text-red-800" title="Deactivate">
                            <XCircle size={16} />
                        </Button>
                    )}
                     {/* Placeholder for view details button 
                     <Button variant="ghost" size="sm" title="View Details">
                        <Eye size={16} />
                    </Button> */}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      
      <Modal isOpen={isModalOpen} onClose={handleCloseModal} title={editingAffiliate?.affiliateID ? 'Edit Affiliate' : 'Add New Affiliate'} size="md">
        {editingAffiliate && (
            <form onSubmit={handleSaveChanges} className="space-y-4">
                <Input label="Name" name="name" value={editingAffiliate.name || ''} onChange={handleInputChange} required disabled={!!editingAffiliate.affiliateID}/>
                <Input label="Email" name="email" type="email" value={editingAffiliate.email || ''} onChange={handleInputChange} required disabled={!!editingAffiliate.affiliateID}/>
                <Input label="Payout Details (e.g., PayPal)" name="payoutDetails" value={editingAffiliate.payoutDetails || ''} onChange={handleInputChange} />
                 <div>
                    <label htmlFor="status" className="block text-sm font-medium text-textPrimary mb-1">Status</label>
                    <select 
                        name="status" 
                        id="status"
                        value={editingAffiliate.status || 'Pending'} 
                        onChange={handleInputChange}
                        className="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm"
                    >
                        <option value="Pending">Pending</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                </div>
                {/* userId could be an input if admin needs to link to an existing user manually for new affiliates */}
                {/* <Input label="User ID (Optional)" name="userId" value={editingAffiliate.userId || ''} onChange={handleInputChange} /> */}
                <div className="flex justify-end space-x-3 pt-4">
                    <Button type="button" variant="outline" onClick={handleCloseModal} disabled={isSaving}>Cancel</Button>
                    <Button type="submit" variant="primary" isLoading={isSaving}>
                        {editingAffiliate.affiliateID ? 'Save Changes' : 'Create Affiliate'}
                    </Button>
                </div>
            </form>
        )}
      </Modal>

    </div>
  );
};

export default AdminAffiliatesPage;
